package com.example.tgmuserversprin.handler;

import com.example.tgmuserversprin.model.FileModel;
import com.example.tgmuserversprin.model.ModuleModel;
import com.example.tgmuserversprin.model.SubjectModel;
import com.example.tgmuserversprin.model.TitleModel;
import org.apache.tomcat.util.http.fileupload.FileUtils;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@Service
public class DbHandler {
    private final String sqlCreateCoursesTable = "CREATE TABLE IF NOT EXISTS courses (" +
            "id int generated by default as identity primary key," +
            "faculty varchar(255)," +
            "course varchar(100)," +
            "semester varchar(100))";

    private final String sqlCreateSubjectTable = "CREATE TABLE IF NOT EXISTS subjects (" +
            "id int generated by default as identity primary key," +
            "course_id int REFERENCES courses ON DELETE CASCADE," +
            "subject_name varchar(1000)," +
            "foreign key (course_id) references courses (id))";

    private final String sqlCreateModuleTable = "CREATE TABLE IF NOT EXISTS modules (" +
            "id int generated by default as identity primary key," +
            "subject_id int REFERENCES subjects ON DELETE CASCADE," +
            "module varchar(100)," +
            "subject_type varchar(100)," +
            "foreign key (subject_id) references subjects (id))";

    private final String sqlCreateThemesTable = "CREATE TABLE IF NOT EXISTS themes (" +
            "id int generated by default as identity primary key," +
            "module_id int REFERENCES modules ON DELETE CASCADE," +
            "theme_title varchar(1000)," +
            "foreign key (module_id) references modules (id))";

    private final String sqlCreateFilesTable = "CREATE TABLE IF NOT EXISTS files (" +
            "id int generated by default as identity primary key," +
            "theme_id int REFERENCES themes ON DELETE CASCADE," +
            "path varchar(2000)," +
            "file_name varchar(2000)," +
            "foreign key (theme_id) references themes (id))";

    private final String sqlSelectThemeId = "SELECT id FROM themes " +
            "WHERE module_id = (SELECT id FROM modules " +
            "   WHERE subject_id = (SELECT id FROM subjects " +
            "       WHERE course_id = (SELECT id FROM courses " +
            "           WHERE faculty = ? and course = ? and semester = ?) " +
            "       and subject_name = ?) " +
            "   and module = ? and subject_type = ?) " +
            "and theme_title = ?";

    private final String sqlSelectModuleId = "SELECT id FROM modules " +
            "WHERE subject_id = (SELECT id FROM subjects " +
            "   WHERE course_id = (SELECT id FROM courses " +
            "       WHERE faculty = ? and course = ? and semester = ?) " +
            "   and subject_name = ?) " +
            "and module = ? and subject_type = ?";

    private final String sqlSelectSubjectId = "SELECT id FROM subjects " +
            "WHERE course_id = (SELECT id FROM courses " +
            "   WHERE faculty = ? and course = ? and semester = ?) " +
            "and subject_name = ?";

    private final String sqlSelectCourseId = "SELECT id FROM courses " +
            "WHERE faculty = ? and course = ? and semester = ?";

    private final String url = "jdbc:postgresql://localhost:5432/tgmu-db";

    private final String login = "sa";

    private final String password = "password";

    public DbHandler() throws SQLException {
        Connection conn = DriverManager.getConnection(url, login, password);
        Statement st = conn.createStatement();
        st.execute(sqlCreateCoursesTable);
        st.execute(sqlCreateSubjectTable);
        st.execute(sqlCreateModuleTable);
        st.execute(sqlCreateThemesTable);
        st.execute(sqlCreateFilesTable);
        st.close();

        List<String> faculties = List.of(
                "Лечебный факультет",
                "Стоматологический факультет",
                "Педиатрический факультет",
                "Фармацевтический факультет",
                "Клин. психология факультет"
        );
        List<String> courses = List.of("1 курс", "2 курс", "3 курс", "4 курс", "5 курс", "6 курс");
        List<String> semesters = List.of("1 семестр", "2 семестр");

        int id = 1;

        for (String fac : faculties) {
            for (String crs : courses) {
                for (String sem : semesters) {
                    PreparedStatement ps = conn.prepareStatement("INSERT INTO courses " +
                            "(id, faculty, course, semester) " +
                            "values (?, ?, ?, ?) on conflict do nothing");
                    ps.setInt(1, id++);
                    ps.setString(2, fac);
                    ps.setString(3, crs);
                    ps.setString(4, sem);
                    ps.executeUpdate();
                    ps.close();
                }
            }
        }


//        PreparedStatement ps = conn.prepareStatement("INSERT INTO courses (faculty, course, semester) values (?, ?, ?)");
//        ps.setString(1, "Лечебный факультет");
//        ps.setString(2, "1 курс");
//        ps.setString(3, "1 семестр");
//        ps.executeUpdate();
//        ps.close();
//
//        ps = conn.prepareStatement("INSERT INTO subjects " +
//                "(course_id, subject_name, module, subject_type) " +
//                "values ((select id from courses where faculty = ? and course = ? and semester = ?),?,?,?)");
//
//        ps.setString(1, "Лечебный факультет");
//        ps.setString(2, "1 курс");
//        ps.setString(3, "1 семестр");
//        ps.setString(4, "Анатомия");
//        ps.setString(5, "1 модуль");
//        ps.setString(6, "Лекция");
//        ps.executeUpdate();
//        ps.close();
//
//        ps = conn.prepareStatement("INSERT INTO themes " +
//                "(subject_id, theme_title) " +
//                "values (" +
//                "   (select id from subjects " +
//                "   where course_id = (select id from courses " +
//                "       where faculty = ? and course = ? and semester = ?) " +
//                "   and subject_name = ? and module = ? and subject_type = ?), " +
//                "?)");
//        ps.setString(1, "Лечебный факультет");
//        ps.setString(2, "1 курс");
//        ps.setString(3, "1 семестр");
//        ps.setString(4, "Анатомия");
//        ps.setString(5, "1 модуль");
//        ps.setString(6, "Лекция");
//        ps.setString(7, "Математика");
//        ps.executeUpdate();
//        ps.close();

        conn.close();
    }

    public void safeFile(String fileName, String filePath) throws SQLException {
        String[] data = filePath.split("/");
        System.out.println(filePath);
        Connection conn = DriverManager.getConnection(url, login, password);

        PreparedStatement ps = conn.prepareStatement(sqlSelectThemeId);

        ps.setString(1, data[3]);
        ps.setString(2, data[4]);
        ps.setString(3, data[5]);
        ps.setString(4, data[6]);
        ps.setString(5, data[7]);
        ps.setString(6, data[8]);
        ps.setString(7, data[9]);
        ResultSet rs = ps.executeQuery();
        rs.next();

        int id = rs.getInt(1);

        ps.close();
        rs.close();

        PreparedStatement psIns = conn.prepareStatement("INSERT INTO files (theme_id, path, file_name) " +
                "values (?, ?, ?)");
        psIns.setInt(1, id);
        psIns.setString(2, filePath);
        psIns.setString(3, fileName);
        psIns.executeUpdate();
        psIns.close();

        conn.close();
    }

    public void safeSubject(List<SubjectModel> subjectModels) throws SQLException {
        if (subjectModels.isEmpty()) {
            return;
        }

        Connection conn = DriverManager.getConnection(url, login, password);

        for (SubjectModel el : subjectModels) {
            PreparedStatement ps = conn.prepareStatement(sqlSelectCourseId);
            ps.setString(1, el.getFaculty());
            ps.setString(2, el.getCourse());
            ps.setString(3, el.getSemester());
            ResultSet rs = ps.executeQuery();
            rs.next();

            int id = rs.getInt(1);

            ps.close();
            rs.close();

            PreparedStatement psIns = conn.prepareStatement("INSERT INTO subjects (course_id, subject_name) " +
                    "values (?, ?)");
            psIns.setInt(1, id);
            psIns.setString(2, el.getSubjectName());
            psIns.executeUpdate();
            psIns.close();
        }

        conn.close();
    }

    public void safeModule(List<ModuleModel> moduleModels) throws SQLException {
        if (moduleModels.isEmpty()) {
            return;
        }

        Connection conn = DriverManager.getConnection(url, login, password);

        for (ModuleModel el : moduleModels) {
            PreparedStatement ps = conn.prepareStatement(sqlSelectSubjectId);
            ps.setString(1, el.getFaculty());
            ps.setString(2, el.getCourse());
            ps.setString(3, el.getSemester());
            ps.setString(4, el.getSubjectName());
            ResultSet rs = ps.executeQuery();
            rs.next();

            int id = rs.getInt(1);

            ps.close();
            rs.close();

            PreparedStatement psIns = conn.prepareStatement("INSERT INTO modules (subject_id, module, subject_type) " +
                    "values (?, ?, ?)");
            psIns.setInt(1, id);
            psIns.setString(2, el.getModule());
            psIns.setString(3, el.getSubjectType());
            psIns.executeUpdate();
            psIns.close();
        }

        conn.close();
    }

    public void safeTitle(List<TitleModel> titleModels) throws SQLException {
        if (titleModels.isEmpty()) {
            return;
        }

        Connection conn = DriverManager.getConnection(url, login, password);

        for (TitleModel el : titleModels) {
            PreparedStatement ps = conn.prepareStatement(sqlSelectModuleId);
            ps.setString(1, el.getFaculty());
            ps.setString(2, el.getCourse());
            ps.setString(3, el.getSemester());
            ps.setString(4, el.getSubjectName());
            ps.setString(5, el.getModule());
            ps.setString(6, el.getSubjectType());
            ResultSet rs = ps.executeQuery();
            rs.next();

            int id = rs.getInt(1);

            ps.close();
            rs.close();

            PreparedStatement psIns = conn.prepareStatement("INSERT INTO themes (module_id, theme_title) " +
                    "values (?, ?)");
            psIns.setInt(1, id);
            psIns.setString(2, el.getThemeTitle());
            psIns.executeUpdate();
            psIns.close();
        }

        conn.close();
    }

    public void deleteFile(List<FileModel> fileModels) throws SQLException, IOException {
        if (fileModels.isEmpty()) {
            return;
        }

        Connection conn = DriverManager.getConnection(url, login, password);

        for (FileModel el : fileModels) {
            PreparedStatement ps = conn.prepareStatement(sqlSelectThemeId);
            ps.setString(1, el.getFaculty());
            ps.setString(2, el.getCourse());
            ps.setString(3, el.getSemester());
            ps.setString(4, el.getSubjectName());
            ps.setString(5, el.getModule());
            ps.setString(6, el.getSubjectType());
            ps.setString(7, el.getThemeTitle());
            ResultSet rs = ps.executeQuery();
            rs.next();

            int id = rs.getInt(1);

            rs.close();
            ps.close();

            PreparedStatement psDel = conn.prepareStatement("DELETE FROM files where theme_id = ? and file_name = ?");
            psDel.setInt(1, id);
            psDel.setString(2, el.getName());
            psDel.executeUpdate();
            psDel.close();

            FileUtils.forceDelete(new File(el.getPath()));
        }

        conn.close();
    }

    public void deleteTitle(List<TitleModel> titleModels) throws SQLException, IOException {
        if (titleModels.isEmpty()) {
            return;
        }

        Connection conn = DriverManager.getConnection(url, login, password);

        for (TitleModel el : titleModels) {
            PreparedStatement ps = conn.prepareStatement(sqlSelectModuleId);
            ps.setString(1, el.getFaculty());
            ps.setString(2, el.getCourse());
            ps.setString(3, el.getSemester());
            ps.setString(4, el.getSubjectName());
            ps.setString(5, el.getModule());
            ps.setString(6, el.getSubjectType());
            ResultSet rs = ps.executeQuery();
            rs.next();

            int id = rs.getInt(1);

            rs.close();
            ps.close();

            PreparedStatement psDel = conn.prepareStatement("DELETE FROM themes where module_id = ? and theme_title = ?");
            psDel.setInt(1, id);
            psDel.setString(2, el.getThemeTitle());
            psDel.executeUpdate();
            psDel.close();

            FileUtils.deleteDirectory(new File(el.getPath()));
        }

        conn.close();
    }

    public Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, List<FileTitleModel>>>>>>> getData() throws SQLException {
        Connection conn = DriverManager.getConnection(url, login, password);
        PreparedStatement psCourses = conn.prepareStatement("SELECT id, faculty, course, semester FROM courses");
        ResultSet rsCourses = psCourses.executeQuery();

        Map<String, Map<String, Map<String, Map<String, Map<String, Map<String, List<FileTitleModel>>>>>>> resultMap = new LinkedHashMap<>();

        while (rsCourses.next()) {
            int courseId = rsCourses.getInt(1);
            String faculty = rsCourses.getString(2);
            String course = rsCourses.getString(3);
            String semester = rsCourses.getString(4);

            if (!resultMap.containsKey(faculty)) {
                resultMap.put(faculty, new LinkedHashMap<>());
            }

            if (!resultMap.get(faculty).containsKey(course)) {
                resultMap.get(faculty).put(course, new LinkedHashMap<>());
            }

            if (!resultMap.get(faculty).get(course).containsKey(semester)) {
                resultMap.get(faculty).get(course).put(semester, new LinkedHashMap<>());
            }

            PreparedStatement psSubjects = conn.prepareStatement("SELECT id, subject_name " +
                    "FROM subjects " +
                    "WHERE course_id = ?");
            psSubjects.setInt(1, courseId);
            ResultSet rsSubjects = psSubjects.executeQuery();

            while (rsSubjects.next()) {
                int subjectId = rsSubjects.getInt(1);
                String subjectName = rsSubjects.getString(2);

                if (!resultMap.get(faculty).get(course).get(semester).containsKey(subjectName)) {
                    resultMap.get(faculty).get(course).get(semester).put(subjectName, new LinkedHashMap<>());
                }

                PreparedStatement psModules = conn.prepareStatement("SELECT id, module, subject_type " +
                        "FROM modules " +
                        "WHERE subject_id = ?");
                psModules.setInt(1, subjectId);
                ResultSet rsModules = psModules.executeQuery();

                while (rsModules.next()) {
                    int moduleId = rsModules.getInt(1);
                    String module = rsModules.getString(2);
                    String subjectType = rsModules.getString(3);

                    if (!resultMap.get(faculty).get(course).get(semester).get(subjectName).containsKey(module)) {
                        resultMap.get(faculty).get(course).get(semester).get(subjectName).put(module, new LinkedHashMap<>());
                    }

                    if (!resultMap.get(faculty).get(course).get(semester)
                            .get(subjectName).get(module).containsKey(subjectType)) {
                        resultMap.get(faculty).get(course).get(semester)
                                .get(subjectName).get(module).put(subjectType, new ArrayList<>());
                    }

                    PreparedStatement psTitles = conn.prepareStatement("SELECT id, theme_title " +
                            "FROM themes " +
                            "WHERE module_id = ?");
                    psTitles.setInt(1, moduleId);
                    ResultSet rsTitles = psTitles.executeQuery();

                    while (rsTitles.next()) {
                        int themeId = rsTitles.getInt(1);
                        String themeTitle = rsTitles.getString(2);
                        List<String> files = new ArrayList<>();

                        PreparedStatement psFiles = conn.prepareStatement("SELECT file_name " +
                                "FROM files " +
                                "WHERE theme_id = ?");
                        psFiles.setInt(1, themeId);
                        ResultSet rsFiles = psFiles.executeQuery();

                        while (rsFiles.next()) {
                            String fileName = rsFiles.getString(1);
                            files.add(fileName);
                        }
                        rsFiles.close();
                        psFiles.close();

                        FileTitleModel ftm = FileTitleModel.builder().title(themeTitle).files(files).build();
                        resultMap.get(faculty).get(course).get(semester)
                                .get(subjectName).get(module).get(subjectType).add(ftm);
                    }

                    rsTitles.close();
                    psTitles.close();
                }

                rsModules.close();
                psModules.close();

            }

            rsSubjects.close();
            psSubjects.close();
        }

        rsCourses.close();
        psCourses.close();
        conn.close();

        return resultMap;
    }

    public void deleteModule(List<ModuleModel> moduleModels) throws SQLException, IOException {
        if (moduleModels.isEmpty()) {
            return;
        }

        Connection conn = DriverManager.getConnection(url, login, password);

        for (ModuleModel el : moduleModels) {
            PreparedStatement ps = conn.prepareStatement(sqlSelectSubjectId);
            ps.setString(1, el.getFaculty());
            ps.setString(2, el.getCourse());
            ps.setString(3, el.getSemester());
            ps.setString(4, el.getSubjectName());
            ResultSet rs = ps.executeQuery();
            rs.next();

            int id = rs.getInt(1);

            rs.close();
            ps.close();

            PreparedStatement psDel = conn.prepareStatement("DELETE FROM modules where subject_id = ? and module = ? and subject_type = ?");
            psDel.setInt(1, id);
            psDel.setString(2, el.getModule());
            psDel.setString(3, el.getSubjectType());
            psDel.executeUpdate();
            psDel.close();

            FileUtils.deleteDirectory(new File(el.getPath()));
        }

        conn.close();
    }

    public void deleteSubject(List<SubjectModel> subjectModels) throws SQLException, IOException {
        if (subjectModels.isEmpty()) {
            return;
        }

        Connection conn = DriverManager.getConnection(url, login, password);

        for (SubjectModel el : subjectModels) {
            PreparedStatement ps = conn.prepareStatement(sqlSelectCourseId);
            ps.setString(1, el.getFaculty());
            ps.setString(2, el.getCourse());
            ps.setString(3, el.getSemester());
            ResultSet rs = ps.executeQuery();
            rs.next();

            int id = rs.getInt(1);

            rs.close();
            ps.close();

            PreparedStatement psDel = conn.prepareStatement("DELETE FROM subjects where course_id = ? and subject_name = ?");
            psDel.setInt(1, id);
            psDel.setString(2, el.getSubjectName());
            psDel.executeUpdate();
            psDel.close();

            FileUtils.deleteDirectory(new File(el.getPath()));
        }

        conn.close();
    }

    public void updateSubject(List<SubjectModel> subjectModels) throws SQLException {
        if (subjectModels.isEmpty()) {
            return;
        }

        Connection conn = DriverManager.getConnection(url, login, password);

        for (SubjectModel el : subjectModels) {
            PreparedStatement ps = conn.prepareStatement(sqlSelectCourseId);
            ps.setString(1, el.getFaculty());
            ps.setString(2, el.getCourse());
            ps.setString(3, el.getSemester());
            ResultSet rs = ps.executeQuery();
            rs.next();

            int id = rs.getInt(1);

            rs.close();
            ps.close();

            String sqlUpdate = "UPDATE subjects SET subject_name = ? WHERE course_id = ? and subject_name = ?";

            PreparedStatement psUpd = conn.prepareStatement(sqlUpdate);
            psUpd.setString(1, el.getSubjectName().split("\\|")[1]);
            psUpd.setInt(2, id);
            psUpd.setString(3, el.getSubjectName().split("\\|")[0]);
            psUpd.executeUpdate();
            psUpd.close();

            String[] str = el.getPath().split("/");
            str[str.length - 1] = el.getSubjectName().split("\\|")[1];
            String newPath = String.join("/", str);
            str[str.length - 1] = el.getSubjectName().split("\\|")[0];
            String path = String.join("/", str);

            File file = new File(path);
            file.renameTo(new File(newPath));
        }

        conn.close();
    }

    public void updateTitle(List<TitleModel> titleModels) throws SQLException {
        if (titleModels.isEmpty()) {
            return;
        }

        Connection conn = DriverManager.getConnection(url, login, password);

        for (TitleModel el : titleModels) {
            PreparedStatement ps = conn.prepareStatement(sqlSelectModuleId);
            ps.setString(1, el.getFaculty());
            ps.setString(2, el.getCourse());
            ps.setString(3, el.getSemester());
            ps.setString(4, el.getSubjectName());
            ps.setString(5, el.getModule());
            ps.setString(6, el.getSubjectType());
            ResultSet rs = ps.executeQuery();
            rs.next();

            int id = rs.getInt(1);

            ps.close();
            rs.close();

            String sqlUpdate = "UPDATE themes SET theme_title = ? WHERE module_id = ? and theme_title = ?";

            PreparedStatement psUpd = conn.prepareStatement(sqlUpdate);
            psUpd.setString(1, el.getThemeTitle().split("\\|")[1]);
            psUpd.setInt(2, id);
            psUpd.setString(3, el.getThemeTitle().split("\\|")[0]);
            psUpd.executeUpdate();
            psUpd.close();

            String[] str = el.getPath().split("/");
            str[str.length - 1] = el.getThemeTitle().split("\\|")[1];
            String newPath = String.join("/", str);
            str[str.length - 1] = el.getThemeTitle().split("\\|")[0];
            String path = String.join("/", str);

            File file = new File(path);
            file.renameTo(new File(newPath));
        }

        conn.close();
    }
}
